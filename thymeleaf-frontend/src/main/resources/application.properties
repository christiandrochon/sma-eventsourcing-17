spring.application.name=thymeleaf-frontend
server.port=8094
vehicule.json.path=classpath:vehicules.json

external.service.url=http://localhost:8092
#external.service.url=http://sma-monolithe:8092

spring.devtools.add-properties=false

###################
# LOGS
# TYPE = TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF
#logs spring
logging.level.root=info
# logs configuration reactive
logging.level.org.springframework.web.reactive.function.client=info
logging.level.org.springframework.http.codec.json=info
logging.level.org.springframework.web.reactive.function.client.ExchangeFunctions=info
# logs json
logging.level.com.fasterxml.jackson=info
# logs configuration
logging.level.org.springframework=info
logging.level.org.springframework.boot=info
##logs spring
#logging.level.root=warn
## logs configuration reactive
#logging.level.org.springframework.web.reactive.function.client=warn
#logging.level.org.springframework.http.codec.json=warn
#logging.level.org.springframework.web.reactive.function.client.ExchangeFunctions=warn
## logs json
#logging.level.com.fasterxml.jackson=warn
## logs configuration
#logging.level.org.springframework=warn
#logging.level.org.springframework.boot=warn
# thymeleaf
logging.level.org.thymeleaf=DEBUG
logging.level.org.thymeleaf.TemplateEngine=DEBUG

#compiler.automake.allow.when.app.running=true
spring.web.resources.static-locations=classpath:/static/,classpath:/public/,classpath:/resources/,classpath:/META-INF/resources/, classpath:/templates/
spring.thymeleaf.cache=false

###################
# KEYCLOAK
# OAuth2 Client Registration
spring.security.oauth2.client.registration.google.clientId=782329702620-feq7hnq8scsh09socq04dhornaias4bj.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.provider.google.user-name-attribute=email

spring.security.oauth2.client.registration.keycloak.client-id=thymeleaf-frontend
spring.security.oauth2.client.registration.keycloak.client-secret=MBinMVYtzP7Yzm5vBbmfY8JVwhDTqYYl
spring.security.oauth2.client.registration.keycloak.scope=openid,profile,email,offline_access
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

# Provider Configuration (pointing to Keycloak)
spring.security.oauth2.client.provider.keycloak.authorization-uri=http://keycloak:8080/realms/sma-realm/protocol/openid-connect/auth
spring.security.oauth2.client.provider.keycloak.token-uri=http://keycloak:8080/realms/sma-realm/protocol/openid-connect/token
spring.security.oauth2.client.provider.keycloak.user-info-uri=http://keycloak:8080/realms/sma-realm/protocol/openid-connect/userinfo
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://keycloak:8080/realms/sma-realm
spring.security.oauth2.client.provider.keycloak.jwk-set-uri=http://keycloak:8080/realms/sma-realm/protocol/openid-connect/certs

# Session Management (Optional)
spring.security.oauth2.client.registration.keycloak.client-name=Keycloak


# KEYCLOAK
#spring.security.oauth2.client.registration.keycloak.provider=keycloak
#spring.security.oauth2.client.registration.keycloak.provider-uri=http://keycloak:8080/realms/sma-realm/.well-known/openid-configuration
#spring.security.oauth2.client.registration.keycloak.client-name=keycloak
#spring.security.oauth2.client.registration.keycloak.client-id=thymeleaf-frontend
##spring.security.oauth2.client.registration.keycloak.client-secret=OvsPNmZbc25U9o8k6AEF3vwrkZx9qSC0
## en fonction des scopes, le jwt contient plus ou moins d'informations
#spring.security.oauth2.client.registration.keycloak.scope=openid,profile,email,offline_access
#spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
#
## redirige l'user vers cette adresse apres s'etre authentifie
##spring.security.oauth2.client.registration.keycloak.redirect-uri=http://localhost:8094/login/oauth2/code/thymeleaf-frontend
##spring.security.oauth2.client.registration.keycloak.redirect-uri=http://thymeleaf-frontend:8094/login/oauth2/code/thymeleaf-frontend
##spring.security.oauth2.client.registration.keycloak.redirect-uri=http://localhost:8080/login/oauth2/code/keycloak
#spring.security.oauth2.client.registration.keycloak.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

#spring.security.oauth2.client.provider.keycloak.authorization-uri=http://localhost:8080/realms/sma-realm/protocol/openid-connect/auth
#spring.security.oauth2.client.provider.keycloak.token-uri=http://localhost:8080/realms/sma-realm/protocol/openid-connect/token
#spring.security.oauth2.client.provider.keycloak.user-info-uri=http://localhost:8080/realms/sma-realm/protocol/openid-connect/userinfo
#spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8080/realms/sma-realm
#spring.security.oauth2.client.provider.keycloak.jwk-set-uri=http://localhost:8080/realms/sma-realm/protocol/openid-connect/certs

#spring.security.oauth2.client.provider.keycloak.authorization-uri=http://keycloak:8080/realms/sma-realm/protocol/openid-connect/auth
#spring.security.oauth2.client.provider.keycloak.token-uri=http://keycloak:8080/realms/sma-realm/protocol/openid-connect/token
#spring.security.oauth2.client.provider.keycloak.user-info-uri=http://keycloak:8080/realms/sma-realm/protocol/openid-connect/userinfo
#spring.security.oauth2.client.provider.keycloak.issuer-uri=http://keycloak:8080/realms/sma-realm
#spring.security.oauth2.client.provider.keycloak.jwk-set-uri=http://keycloak:8080/realms/sma-realm/protocol/openid-connect/certs
#spring.security.oauth2.client.registration.keycloak.redirect-uri=http://localhost:8094/login/oauth2/code/keycloak

# Base URL of your application (Frontend)
#spring.security.oauth2.client.registration.keycloak.redirect-uri=http://localhost:8094/login/oauth2/code/keycloak
#spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
#spring.security.oauth2.client.provider.keycloak.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:8080/realms/sma-realm}
#spring.security.oauth2.client.provider.keycloak.issuer-uri=${KEYCLOAK_ISSUER_URI:http://nginx:8080/realms/sma-realm}
# preferred_username affiche par defaut lorsqu'un user est connecte avec keycloak


###################
# H2
#spring.datasource.url=jdbc:h2:mem:thymeleaf-db;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
#spring.h2.console.enabled=true
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.h2.console.settings.trace=true
#spring.h2.console.settings.web-allow-others=true
